# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface ErrorInterface {
    "Generic error message"
    message: String
}

type Chat {
    _id: MongoID!
    createdAt: Date
    messages: [ChatMessages]
    participants: [MongoID]
    updatedAt: Date
}

type ChatMessages {
    _id: MongoID
    author: MongoID
    content: String
    createdAt: Date
    updatedAt: Date
}

type CreateManyUserAdminPayload {
    "Number of created documents"
    createdCount: Int!
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Documents IDs"
    recordIds: [MongoID!]!
    "Created documents"
    records: [UserAdmin!]
}

type CreateOneLikePayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Created document"
    record: Like
    "Document ID"
    recordId: MongoID
}

type CreateOneUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Created document"
    record: UserAdmin
    "Document ID"
    recordId: MongoID
}

type Language {
    alpha2: String
    name: String!
    nativeName: String!
}

type Like {
    _id: MongoID!
    createdAt: Date
    recipient: MongoID
    requester: MongoID
    status: String!
    updatedAt: Date
}

type Mutation {
    "Delete a message of the current user"
    editOrDeleteMessage(chatID: MongoID!, content: String, messageID: MongoID!): String!
    "Write a message to a chat the user is participating in."
    sendMessage(chatID: MongoID!, content: String!): String!
    "Create an account"
    signup(email: String!, name: String!, password: String!): UserPrivate
    "Like or Dislike someone. requester gets automatically set and overrides any value"
    swipe(record: CreateOneLikeInput!): CreateOneLikePayload
    "Creates Many documents with mongoose defaults, setters, hooks and validation"
    userCreateManyAdmin(records: [CreateManyUserAdminInput!]!): CreateManyUserAdminPayload
    "Create one document with mongoose defaults, setters, hooks and validation"
    userCreateOneAdmin(record: CreateOneUserAdminInput!): CreateOneUserAdminPayload
    "Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document."
    userRemoveByIdAdmin(_id: MongoID!): RemoveByIdUserAdminPayload
    "Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. "
    userRemoveManyAdmin(
        "Filter by fields"
        filter: FilterRemoveManyUserAdminInput!,
        limit: Int = 100
    ): RemoveManyUserAdminPayload
    "Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document."
    userRemoveOneAdmin(
        "Filter by fields"
        filter: FilterRemoveOneUserAdminInput,
        sort: SortRemoveOneUserAdminInput
    ): RemoveOneUserAdminPayload
    "Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it."
    userUpdateByIdAdmin(_id: MongoID!, record: UpdateByIdUserAdminInput!): UpdateByIdUserAdminPayload
    "Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. "
    userUpdateManyAdmin(
        "Filter by fields"
        filter: FilterUpdateManyUserAdminInput,
        limit: Int = 100,
        record: UpdateManyUserAdminInput!,
        skip: Int,
        sort: SortUpdateManyUserAdminInput
    ): UpdateManyUserAdminPayload
    "Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it."
    userUpdateOneAdmin(
        "Filter by fields"
        filter: FilterUpdateOneUserAdminInput,
        record: UpdateOneUserAdminInput!,
        skip: Int,
        sort: SortUpdateOneUserAdminInput
    ): UpdateOneUserAdminPayload
    "Update currently logged in user"
    userUpdateSelf(aboutMe: String, blocked: UserPrivateBlockedMutation, dateOfBirth: Date, friends: UserPrivateFriendsMutation, gender: EnumUserPrivateGender, ingameRole: [EnumUserPrivateIngameRole], languages: [String], name: String): UserPrivate
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type PaginationInfo {
    currentPage: Int!
    hasNextPage: Boolean
    hasPreviousPage: Boolean
    itemCount: Int
    pageCount: Int
    perPage: Int!
}

type Query {
    "Show the chat a user is participating in"
    getChat(chatID: MongoID!, page: Int): Chat
    languageMany(
        "Filter by fields"
        filter: FilterFindManyLanguageInput,
        limit: Int = 100,
        skip: Int,
        sort: SortFindManyLanguageInput
    ): [Language!]!
    languageOne(
        "Filter by fields"
        filter: FilterFindOneLanguageInput,
        skip: Int,
        sort: SortFindOneLanguageInput
    ): Language
    "Use Login Credentials (Email + PW) to get a JWT auth token"
    login(email: String!, password: String!): String!
    userByIdAdmin(_id: MongoID!): UserAdmin
    userByIdsAdmin(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUserAdminInput): [UserAdmin!]!
    userConnectionAdmin(
        "Forward pagination argument for returning at most first edges"
        after: String,
        "Backward pagination argument for returning at most last edges"
        before: String,
        "Filter by fields"
        filter: FilterFindManyUserAdminInput,
        "Forward pagination argument for returning at most first edges"
        first: Int,
        "Backward pagination argument for returning at most last edges"
        last: Int,
        "Sort argument for data ordering"
        sort: SortConnectionUserAdminEnum = _ID_DESC
    ): UserAdminConnection
    userCountAdmin(
        "Filter by fields"
        filter: FilterCountUserAdminInput
    ): Int
    "Get the public information of userMany with restricted filters"
    userMany(
        "Filter by fields"
        filter: FilterFindManyUserPublicInput,
        limit: Int = 10,
        skip: Int,
        sort: SortFindManyUserPublicInput
    ): [UserPublic!]!
    userManyAdmin(
        "Filter by fields"
        filter: FilterFindManyUserAdminInput,
        limit: Int = 100,
        skip: Int,
        sort: SortFindManyUserAdminInput
    ): [UserAdmin!]!
    """

    Show users the client may be interested in swiping. This includes:
    1. All users that liked the client
    2. All users that match the filters used

    Excludes the following users: The client itself, friends, blocked users and users the client already liked.
    Limit: 10
    """
    userManyToSwipe(
        "Filter by fields"
        filter: FilterFindManyUserPublicInput
    ): [UserPublic]
    userOneAdmin(
        "Filter by fields"
        filter: FilterFindOneUserAdminInput,
        skip: Int,
        sort: SortFindOneUserAdminInput
    ): UserAdmin
    userOneById(_id: MongoID!): UserPublic
    "Show public information of user by name"
    userOneByName(nameNormalized: String!): UserPublic
    userPaginationAdmin(
        "Filter by fields"
        filter: FilterFindManyUserAdminInput,
        "Page number for displaying"
        page: Int,
        perPage: Int = 20,
        sort: SortFindManyUserAdminInput
    ): UserAdminPagination
    "Get information of currently logged in user"
    userSelf: UserPrivate
}

type RemoveByIdUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Removed document"
    record: UserAdmin
    "Document ID"
    recordId: MongoID
}

type RemoveManyUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Affected documents number"
    numAffected: Int
}

type RemoveOneUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Removed document"
    record: UserAdmin
    "Document ID"
    recordId: MongoID
}

type UpdateByIdUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Updated document"
    record: UserAdmin
    "Document ID"
    recordId: MongoID
}

type UpdateManyUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Affected documents number"
    numAffected: Int
}

type UpdateOneUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Updated document"
    record: UserAdmin
    "Document ID"
    recordId: MongoID
}

"Full User Model. Exposed only for Admins"
type UserAdmin {
    _id: MongoID!
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String!
    friends: [UserAdminFriends]
    gender: EnumUserAdminGender!
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String!
    nameNormalized: String
    role: EnumUserAdminRole!
    updatedAt: Date
}

"A connection to a list of items."
type UserAdminConnection {
    "Total object count."
    count: Int!
    "Information to aid in pagination."
    edges: [UserAdminEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type UserAdminEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: UserAdmin!
}

type UserAdminFriends {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

"List of items with pagination."
type UserAdminPagination {
    "Total object count."
    count: Int
    "Array of objects."
    items: [UserAdmin!]
    "Information to aid in pagination."
    pageInfo: PaginationInfo!
}

"Fields the user can see about himself"
type UserPrivate {
    _id: MongoID!
    aboutMe: String
    avatar: String
    blocked: [MongoID]
    dateOfBirth: Date
    email: String!
    friends: [UserAdminFriends]
    gender: EnumUserPrivateGender!
    ingameRole: [EnumUserPrivateIngameRole]
    languages: [String]
    name: String!
}

"Contains all public fields of users. Use this for filtering as well"
type UserPublic {
    _id: MongoID!
    aboutMe: String
    age: Float
    avatar: String
    gender: EnumUserPublicGender!
    ingameRole: [EnumUserPublicIngameRole]
    languages: [String]
    name: String!
}

enum EnumUserAdminGender {
    I_prefer_not_to_say
    female
    intersex
    male
    non_binary
    other
    transgender
}

enum EnumUserAdminIngameRole {
    Bot
    Fill
    Jungle
    Mid
    Support
    Top
}

enum EnumUserAdminRole {
    admin
    user
}

enum EnumUserPrivateGender {
    I_prefer_not_to_say
    female
    intersex
    male
    non_binary
    other
    transgender
}

enum EnumUserPrivateIngameRole {
    Bot
    Fill
    Jungle
    Mid
    Support
    Top
}

enum EnumUserPublicGender {
    I_prefer_not_to_say
    female
    intersex
    male
    non_binary
    other
    transgender
}

enum EnumUserPublicIngameRole {
    Bot
    Fill
    Jungle
    Mid
    Support
    Top
}

enum SortConnectionUserAdminEnum {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindByIdsUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyLanguageInput {
    _ID_ASC
    _ID_DESC
}

enum SortFindManyUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyUserPublicInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneLanguageInput {
    _ID_ASC
    _ID_DESC
}

enum SortFindOneUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortRemoveOneUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortUpdateManyUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortUpdateOneUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAMENORMALIZED_ASC
    NAMENORMALIZED_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

input CreateManyUserAdminInput {
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String!
    friends: [UserAdminFriendsInput]
    gender: EnumUserAdminGender!
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String!
    nameNormalized: String
    role: EnumUserAdminRole!
    updatedAt: Date
}

input CreateOneLikeInput {
    createdAt: Date
    recipient: MongoID
    requester: MongoID
    status: String!
    updatedAt: Date
}

input CreateOneUserAdminInput {
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String!
    friends: [UserAdminFriendsInput]
    gender: EnumUserAdminGender!
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String!
    nameNormalized: String
    role: EnumUserAdminRole!
    updatedAt: Date
}

input FilterCountUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterCountUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterCountUserAdminInput {
    AND: [FilterCountUserAdminInput!]
    OR: [FilterCountUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterCountUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterCountUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterCountUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterCountUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterCountUserAdminOperatorsInput {
    _id: FilterCountUserAdmin_idOperatorsInput
    email: FilterCountUserAdminEmailOperatorsInput
    name: FilterCountUserAdminNameOperatorsInput
    nameNormalized: FilterCountUserAdminNameNormalizedOperatorsInput
}

input FilterCountUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterFindManyLanguageInput {
    AND: [FilterFindManyLanguageInput!]
    OR: [FilterFindManyLanguageInput!]
    alpha2: String
    name: String
    nativeName: String
}

input FilterFindManyUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterFindManyUserAdminInput {
    AND: [FilterFindManyUserAdminInput!]
    OR: [FilterFindManyUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterFindManyUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterFindManyUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyUserAdminOperatorsInput {
    _id: FilterFindManyUserAdmin_idOperatorsInput
    email: FilterFindManyUserAdminEmailOperatorsInput
    name: FilterFindManyUserAdminNameOperatorsInput
    nameNormalized: FilterFindManyUserAdminNameNormalizedOperatorsInput
}

input FilterFindManyUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterFindManyUserPublicAgeOperatorsInput {
    gte: Float
    lte: Float
}

input FilterFindManyUserPublicGenderOperatorsInput {
    in: [EnumUserPublicGender]
}

input FilterFindManyUserPublicIngameRoleOperatorsInput {
    in: [EnumUserPublicIngameRole]
}

input FilterFindManyUserPublicInput {
    AND: [FilterFindManyUserPublicInput!]
    OR: [FilterFindManyUserPublicInput!]
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyUserPublicOperatorsInput
    age: Float
    gender: EnumUserPublicGender
    ingameRole: [EnumUserPublicIngameRole]
    languages: [String]
}

input FilterFindManyUserPublicLanguagesOperatorsInput {
    in: [String]
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyUserPublicOperatorsInput {
    age: FilterFindManyUserPublicAgeOperatorsInput
    gender: FilterFindManyUserPublicGenderOperatorsInput
    ingameRole: FilterFindManyUserPublicIngameRoleOperatorsInput
    languages: FilterFindManyUserPublicLanguagesOperatorsInput
}

input FilterFindOneLanguageInput {
    AND: [FilterFindOneLanguageInput!]
    OR: [FilterFindOneLanguageInput!]
    alpha2: String
    name: String
    nativeName: String
}

input FilterFindOneUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterFindOneUserAdminInput {
    AND: [FilterFindOneUserAdminInput!]
    OR: [FilterFindOneUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterFindOneUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterFindOneUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneUserAdminOperatorsInput {
    _id: FilterFindOneUserAdmin_idOperatorsInput
    email: FilterFindOneUserAdminEmailOperatorsInput
    name: FilterFindOneUserAdminNameOperatorsInput
    nameNormalized: FilterFindOneUserAdminNameNormalizedOperatorsInput
}

input FilterFindOneUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterRemoveManyUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterRemoveManyUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterRemoveManyUserAdminInput {
    AND: [FilterRemoveManyUserAdminInput!]
    OR: [FilterRemoveManyUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterRemoveManyUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterRemoveManyUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterRemoveManyUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterRemoveManyUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterRemoveManyUserAdminOperatorsInput {
    _id: FilterRemoveManyUserAdmin_idOperatorsInput
    email: FilterRemoveManyUserAdminEmailOperatorsInput
    name: FilterRemoveManyUserAdminNameOperatorsInput
    nameNormalized: FilterRemoveManyUserAdminNameNormalizedOperatorsInput
}

input FilterRemoveManyUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterRemoveOneUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterRemoveOneUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterRemoveOneUserAdminInput {
    AND: [FilterRemoveOneUserAdminInput!]
    OR: [FilterRemoveOneUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterRemoveOneUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterRemoveOneUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterRemoveOneUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterRemoveOneUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterRemoveOneUserAdminOperatorsInput {
    _id: FilterRemoveOneUserAdmin_idOperatorsInput
    email: FilterRemoveOneUserAdminEmailOperatorsInput
    name: FilterRemoveOneUserAdminNameOperatorsInput
    nameNormalized: FilterRemoveOneUserAdminNameNormalizedOperatorsInput
}

input FilterRemoveOneUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterUpdateManyUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterUpdateManyUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterUpdateManyUserAdminInput {
    AND: [FilterUpdateManyUserAdminInput!]
    OR: [FilterUpdateManyUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterUpdateManyUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterUpdateManyUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterUpdateManyUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterUpdateManyUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterUpdateManyUserAdminOperatorsInput {
    _id: FilterUpdateManyUserAdmin_idOperatorsInput
    email: FilterUpdateManyUserAdminEmailOperatorsInput
    name: FilterUpdateManyUserAdminNameOperatorsInput
    nameNormalized: FilterUpdateManyUserAdminNameNormalizedOperatorsInput
}

input FilterUpdateManyUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterUpdateOneUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterUpdateOneUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input FilterUpdateOneUserAdminInput {
    AND: [FilterUpdateOneUserAdminInput!]
    OR: [FilterUpdateOneUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterUpdateOneUserAdminOperatorsInput
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [FilterUpdateOneUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterUpdateOneUserAdminNameNormalizedOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterUpdateOneUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterUpdateOneUserAdminOperatorsInput {
    _id: FilterUpdateOneUserAdmin_idOperatorsInput
    email: FilterUpdateOneUserAdminEmailOperatorsInput
    name: FilterUpdateOneUserAdminNameOperatorsInput
    nameNormalized: FilterUpdateOneUserAdminNameNormalizedOperatorsInput
}

input FilterUpdateOneUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input UpdateByIdUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input UpdateByIdUserAdminInput {
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [UpdateByIdUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input UpdateManyUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input UpdateManyUserAdminInput {
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [UpdateManyUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input UpdateOneUserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input UpdateOneUserAdminInput {
    aboutMe: String
    age: Float
    avatar: String
    blocked: [MongoID]
    createdAt: Date
    dateOfBirth: Date
    email: String
    friends: [UpdateOneUserAdminFriendsInput]
    gender: EnumUserAdminGender
    ingameRole: [EnumUserAdminIngameRole]
    languages: [String]
    name: String
    nameNormalized: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input UserAdminFriendsInput {
    _id: MongoID
    chat: MongoID
    user: MongoID
}

input UserPrivateBlockedMutation {
    toPop: [MongoID]
    toPush: [MongoID]
}

input UserPrivateFriendsMutation {
    toPop: [MongoID]
}


"The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field."
scalar MongoID

scalar Date

"The string representation of JavaScript regexp. You may provide it with flags \"/^abc.*/i\" or without flags like \"^abc.*\". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"
scalar RegExpAsString